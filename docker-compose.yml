services:
  caddy:
    build:
      context: .
      dockerfile: build/Caddy.Dockerfile
    ports: [ "80:80", "443:443" ]
    environment:
      - HETZNER_DNS_API_TOKEN=${HETZNER_DNS_API_TOKEN}
      - HETZNER_API_TOKEN=${HETZNER_DNS_API_TOKEN}
    volumes:
      - ./Caddyfile:/etc/caddy/Caddyfile:ro
      - caddy_data:/data
      - caddy_config:/config
    depends_on: [ api ]
    restart: unless-stopped

  api:
    build:
      context: .
      dockerfile: build/Api.Dockerfile
    env_file: ./.env
    environment:
      - ASPNETCORE_URLS=http://+:8080
    depends_on: [ pgbouncer, postgres ]
    restart: unless-stopped

  pgbouncer:
    image: edoburu/pgbouncer
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=${POSTGRES_USER}
      - DB_PASSWORD=${POSTGRES_PASSWORD}
      - POOL_MODE=transaction
      - MAX_CLIENT_CONN=2000
      - DEFAULT_POOL_SIZE=50
    ports: [ "6432:6432" ]
    depends_on: [ postgres ]
    restart: unless-stopped

  postgres:
    image: postgres:16
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./seed/admin-init.sql:/docker-entrypoint-initdb.d/00-admin.sql:ro
    ports: [ "5432:5432" ]
    restart: unless-stopped

  redis:
    image: redis:7
    restart: unless-stopped

volumes:
  caddy_data: {}
  caddy_config: {}
  pgdata: {}
